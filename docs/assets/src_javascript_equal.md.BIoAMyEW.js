import{_ as s,c as n,a0 as e,o as l}from"./chunks/framework.xOXxqCsI.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"src/javascript/equal.md","filePath":"src/javascript/equal.md","lastUpdated":null}'),i={name:"src/javascript/equal.md"};function p(t,a,c,r,o,u){return l(),n("div",null,a[0]||(a[0]=[e(`<h2 id="相等性判断" tabindex="-1">相等性判断 <a class="header-anchor" href="#相等性判断" aria-label="Permalink to &quot;相等性判断&quot;">​</a></h2><blockquote><p>前言比较两个数据是否相等在js操作中有十分重要的作用。js中主要有相等与不相等，全等与不全等。</p></blockquote><h3 id="_1-介绍" tabindex="-1">1.介绍 <a class="header-anchor" href="#_1-介绍" aria-label="Permalink to &quot;1.介绍&quot;">​</a></h3><hr><p>在比较两个数据是否相等时ECMAScript提出两种方法。</p><ul><li>== 先转化成相同的数据类型在比较。</li><li>=== 仅比较而不转化类型。</li><li>Object.is() 方法Es6新增。</li></ul><h3 id="_2-相等与不相等" tabindex="-1">2.相等与不相等 <a class="header-anchor" href="#_2-相等与不相等" aria-label="Permalink to &quot;2.相等与不相等&quot;">​</a></h3><blockquote><p>如果a==b 返回true反之返回false,a和b会转变成相同的数据类型。转变的规则如下(尽量把数据都变成数字来比较):</p></blockquote><ul><li><p>若有一个字符是boolean,则boolean会转变为(0,1)。</p></li><li><p>若有一个字符是string,另外一个是number,比较时string转化为number。</p></li><li><p>若一个是对象，另一个不是,比较前对象调用valueOf()方法，用返回的基本类型类判断。</p></li><li><p>null和undefined相等。</p></li><li><p>其中一个是NaN二者不等。</p></li><li><p>两个都是NaN二者不等</p></li><li><p>两个都是对象,比较是否是同一个对象</p></li></ul><h3 id="_3-全等比较" tabindex="-1">3.全等比较 <a class="header-anchor" href="#_3-全等比较" aria-label="Permalink to &quot;3.全等比较&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>99==&#39;99&#39; //true</span></span>
<span class="line"><span>99===&#39;99&#39; //false</span></span>
<span class="line"><span>//特殊的</span></span>
<span class="line"><span>null == undefined //true</span></span>
<span class="line"><span>null === undefined //false 类型不同</span></span></code></pre></div><h3 id="_4-object-is-比较如下规则" tabindex="-1">4.object.is()比较如下规则 <a class="header-anchor" href="#_4-object-is-比较如下规则" aria-label="Permalink to &quot;4.object.is()比较如下规则&quot;">​</a></h3><ul><li>两个值都是 undefined</li><li>两个值都是 null</li><li>两个值都是 true 或者都是 false</li><li>两个值是由相同个数的字符按照相同的顺序组成的字符串</li><li>两个值指向同一个对象</li><li>两个值都是数字并且</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Object.is(window, window);   // true</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Object.is(&#39;a&#39;, &#39;a&#39;);     // false</span></span>
<span class="line"><span>Object.is([], []);           // false</span></span>
<span class="line"><span>var obj = { a: 1 };</span></span>
<span class="line"><span>Object.is(obj, obj);       // true</span></span>
<span class="line"><span>Object.is(null, null);       // true</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 特例</span></span>
<span class="line"><span>Object.is(0, -0);            // false</span></span>
<span class="line"><span>Object.is(-0, -0);           // true</span></span>
<span class="line"><span>Object.is(NaN, 0/0);         // true</span></span></code></pre></div><p>注明：该文章是在原文<a href="https://mp.weixin.qq.com/s/-HPtViPA926BwNp599555w" target="_blank" rel="noreferrer">前端自习课</a>修改而得，感谢原作者！</p>`,15)]))}const h=s(i,[["render",p]]);export{b as __pageData,h as default};
